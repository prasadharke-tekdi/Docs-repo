"use strict";(self.webpackChunkmy_site=self.webpackChunkmy_site||[]).push([[7791],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},f=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(t),f=r,g=d["".concat(l,".").concat(f)]||d[f]||u[f]||o;return t?a.createElement(g,s(s({ref:n},c),{},{components:t})):a.createElement(g,s({ref:n},c))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=f;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[d]="string"==typeof e?e:r,s[1]=i;for(var p=2;p<o;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}f.displayName="MDXCreateElement"},3481:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const o={},s="Grafana Installation and Dashboard Setup",i={unversionedId:"Learning/Grafana",id:"Learning/Grafana",title:"Grafana Installation and Dashboard Setup",description:"Step 1 :",source:"@site/docs/Learning/Grafana.md",sourceDirName:"Learning",slug:"/Learning/Grafana",permalink:"/docs/Learning/Grafana",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Gitlab Upgradation",permalink:"/docs/Learning/Gitlab Upgradation"},next:{title:"Installing Graylog and Configure Server",permalink:"/docs/Learning/Graylog installation"}},l={},p=[],c={toc:p},d="wrapper";function u(e){let{components:n,...o}=e;return(0,r.kt)(d,(0,a.Z)({},c,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"grafana-installation-and-dashboard-setup"},"Grafana Installation and Dashboard Setup"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Step 1")," :\nRefere following docker-compose.yml file for grafana that includes prometheus, cadvisor and node-exporter. But in following docker-compose file we have changed the default ports of the services you can choose it as default "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'version: \'3\'\n\nvolumes:\n  grafana-data:\n    driver: local\n  prometheus-data:\n    driver: local\n\nservices:\n#Prometheus \n\n\n   prometheus:\n    image: prom/prometheus:latest\n    container_name: prometheus\n    ports:\n      - "9090:9090"\n    volumes:\n      - /etc/prometheus/config:/etc/prometheus\n      - prometheus-data:/prometheus\n    restart: unless-stopped\n\n#Grafana\n\n\n   grafana:\n    image: grafana/grafana-oss:latest\n    container_name: grafana\n    ports:\n      - "3005:3000"\n    volumes:\n      - grafana-data:/var/lib/grafana\n    environment:\n     -  GF_SERVER_ROOT_URL=https://ulp.uniteframework.io/grafana\n    restart: unless-stopped\n\n#Node_exporter\n\n\n   node_exporter:\n    image: quay.io/prometheus/node-exporter:latest\n    container_name: node_exporter\n    command:\n      - \'--path.rootfs=/host\'\n    network_mode: host\n    pid: host\n    restart: unless-stopped\n    volumes:\n      - /:/host:ro,rslave\n\n   cadvisor:\n    image: google/cadvisor\n    container_name: cadvisor\n    volumes:\n      - /:/rootfs:ro\n      - /var/run:/var/run:rw\n      - /sys:/sys:ro\n      - /var/lib/docker/:/var/lib/docker:ro\n   \n    ports:\n      - "8005:8080"\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Step 2")," :\nCreate a prometheus.yml file in the following directory with the following configurations in that if any directory not present at location create it. And put your IP in the yml file.\n",(0,r.kt)("inlineCode",{parentName:"p"},"/etc/prometheus/config/prometheus.yml")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"global:\n  scrape_interval: 5s # By default, scrape targets every 5 seconds.\n  evaluation_interval: 1m\n  # Attach these labels to any time series or alerts when communicating with\n  # external systems (federation, remote storage, Alertmanager).\n  # external_labels:\n  #  monitor: 'codelab-monitor'\n\n# A scrape configuration containing exactly one endpoint to scrape:\n# Here it's Prometheus itself.\nscrape_configs:\n  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.\n  - job_name: 'prometheus'\n    # Override the global default and scrape targets from this job every 5 seconds.\n    scrape_interval: 6s\n    static_configs:\n      - targets: ['localhost:9090']\n\n  - job_name: docker_metrics\n    static_configs:\n      - targets: ['<IP>:9323']\n\n  - job_name: 'cadvisor'\n    scrape_interval: 90s\n    scrape_timeout: 30s\n    tls_config:\n      insecure_skip_verify: true\n    static_configs:\n      - targets: ['<IP>:8005']\n\n  - job_name: node\n    scrape_interval: 90s\n    scrape_timeout: 30s\n    tls_config:\n      insecure_skip_verify: true\n    static_configs:\n      - targets: ['<IP>:9100']\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Step 3")," :\nGo the specific directory where your ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," is present and perform following command "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"docker-compose up -d \n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Step 4")," :\nGo to browser and search http://ip:9090 and you will get a prometheus dashboard like following  and goto \u2014> status \u2014-> targets"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"grafana",src:t(7866).Z,width:"1850",height:"465"})),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Step 5")," :\nWait till all the services are not up and running like following "),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"grafana",src:t(9167).Z,width:"1850",height:"914"})),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Step 6")," :\nGo to browser and search for the grafana http://ip:3006 and you will get Grafana login page use User as admin and password as admin for login\nAfter that go to configure \u2014> Datasource \u2014> Add new Datasource \u2014> Prometheus\nAfter selecting prometheus as a datasource you will get following page add URL filled as mentioned in the following image"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"grafana",src:t(1494).Z,width:"1852",height:"972"})),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Step 7")," : After adding Save and test the datasource you will get response as "),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"grafana",src:t(6521).Z,width:"610",height:"232"})),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Step 8")," :\nGo to the home of grafana and go to Dashboards \u2014> New Dashboards \u2014> Add new Panel and you will get following page "),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"grafana",src:t(1419).Z,width:"1844",height:"964"}),"  "),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Step 9")," : Select the following in the fields "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Datasource : Prometheus \nMetric : container_cpu_usage_seconds_total\nlabel : name\n")),(0,r.kt)("p",null,"add your container and run the query (here i have used grafana). Select virtualization as Gauge and you will get following output  "),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"grafana",src:t(6789).Z,width:"1842",height:"966"})," "),(0,r.kt)("p",null,"Save the Dashboard in the upper Right corner and Apply."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Step 10")," :\nYou can add Dashboards also which is predefined by the Grafana for that Go to\nDashboards \u2014> Import \u2014> put Id of the Dashboard \u2014> change ID \u2014> Select Datasource \u2014> import "),(0,r.kt)("p",null,"I have taken Dashboard id as 1860\nYou can find more Dashboards here : ",(0,r.kt)("a",{parentName:"p",href:"https://grafana.com/grafana/dashboards/?search=node+exporter"},"https://grafana.com/grafana/dashboards/?search=node+exporter"),"\nBy selecting above Dashboard (1860) you will get an output as "),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"grafana",src:t(4117).Z,width:"1850",height:"856"})))}u.isMDXComponent=!0},7866:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/img1-e73a1504a7b12c424f4fedbb7c554be9.png"},9167:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/img2-197b5724f320e569bda2902ed6ada6d8.png"},1494:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/img3-f439ce5a9e86c2b66fbcb3d1d96ffca7.png"},6521:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/img4-2bf19860be1c51a480dc73ffe17632b6.png"},1419:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/img5-01f4ef90dfdfe6f28492c6a1bd1f3789.png"},6789:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/img6-926a3341cb46e8a15fd428b0566fe688.png"},4117:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/img7-58292e3a00c0ae1d02d60a14a208fa86.png"}}]);