"use strict";(self.webpackChunkmy_site=self.webpackChunkmy_site||[]).push([[2661],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(n),g=o,u=d["".concat(l,".").concat(g)]||d[g]||m[g]||a;return n?r.createElement(u,s(s({ref:t},c),{},{components:n})):r.createElement(u,s({ref:t},c))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=g;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[d]="string"==typeof e?e:o,s[1]=i;for(var p=2;p<a;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},3222:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const a={},s="Graylog Installation with docker-compose file",i={unversionedId:"Learning/Graylog with Docker compose",id:"Learning/Graylog with Docker compose",title:"Graylog Installation with docker-compose file",description:"Step 1 : Install docker on your system",source:"@site/docs/Learning/Graylog with Docker compose.md",sourceDirName:"Learning",slug:"/Learning/Graylog with Docker compose",permalink:"/docs/Learning/Graylog with Docker compose",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Installing Graylog and Configure Server",permalink:"/docs/Learning/Graylog installation"},next:{title:"MetaBase",permalink:"/docs/Learning/MetaBase"}},l={},p=[],c={toc:p},d="wrapper";function m(e){let{components:t,...a}=e;return(0,o.kt)(d,(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"graylog-installation-with-docker-compose-file"},"Graylog Installation with docker-compose file"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"Step 1"))," : Install docker on your system "),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"Step 2"))," : Perform a command "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    sudo docker swarm init\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"Step 3"))," : Create a file with name ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yml"),"  and add below instructions in it "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"version: '3.3'\nservices:\n # MongoDB: https://hub.docker.com/_/mongo/\n mongodb:\n   image: mongo:4.2\n   volumes:\n     - mongo_data:/data/db\n  # Elasticsearch: https://www.elastic.co/guide/en/elasticsearch/reference/7.10/docker.html\n elasticsearch:\n   image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.2\n   volumes:\n     - es_data:/usr/share/elasticsearch/data\n   environment:\n     - http.host=0.0.0.0\n     - transport.host=localhost\n     - network.host=0.0.0.0\n     - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n   mem_limit: 1g\n # Graylog: https://hub.docker.com/r/graylog/graylog/\n graylog:\n   image: graylog/graylog:4.3\n   volumes:\n     - graylog_data:/usr/share/graylog/data\n   environment:\n     # CHANGE ME (must be at least 16 characters)!\n     - GRAYLOG_PASSWORD_SECRET=ZSp^5J8t7@hruBqQ\n     # Password: admin\n     - GRAYLOG_ROOT_PASSWORD_SHA2=ff72eb281ed3039e0fc3c8fd4a92e3809419a384cedff152ba518104d109ed9b\n     - GRAYLOG_HTTP_EXTERNAL_URI=http://10.125.13.58:3000/\n   entrypoint: /usr/bin/tini -- wait-for-it elasticsearch:9200 --  /docker-entrypoint.sh\n   links:\n       - mongodb:mongo\n       - elasticsearch\n   # restart: always\n   depends_on:\n     - mongodb\n     - elasticsearch\n   ports:\n     # Graylog web interface and REST API\n     - 9000:9000\n     # Syslog TCP\n     - 1514:1514\n     # Syslog UDP\n     - 1514:1514/udp\n     # GELF TCP\n     - 12201:12201\n     # GELF UDP\n     - 12201:12201/udp\n# Volumes for persisting data, see https://docs.docker.com/engine/admin/volumes/volumes/\nvolumes:\n mongo_data:\n   driver: local\n es_data:\n   driver: local\n graylog_data:\n   driver: local\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"Step 4")),' : Create a GRAYLOG_ROOT_PASSWORD_SHA2 with following command\necho -n "Enter Password: " && head -1 </dev/stdin | tr -d \'\\n\' | sha256sum | cut -d" " -f1'),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"Step 5"))," :\nAfter that put a password you have added in the docker-compose file here\nEx. ZSp^5J8t7@hruBqQ (as this password is mention in above file)"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"Step 6"))," : Then you will get a GRAYLOG_ROOT_PASSWORD Replace this new password with the password present in the docker-compose.yml file"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"Step 7"))," :\nRun a command : \t"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"       sudo docker-compose up -d mongodb\n       sudo docker-compose up -d elasticsearch\n       sudo docker-compose up -d graylog\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"Step 8"))," :\nGo to Browser and search for http://ip:9000 then you will be at Graylog front pages use\nUsername : admin\nPassword : ZSp^5J8t7@hruBqQ (as i have this password in my dockercompose file)"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"Step 9"))," :\nGo to graylog \u2014>system \u2014> inputs\n",(0,o.kt)("img",{alt:"graylog_image",src:n(1178).Z,width:"1214",height:"588"})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"Step 10"))," :\nSelect GELF TCP \u2014> Launch new input\n",(0,o.kt)("img",{alt:"graylog_image2",src:n(9293).Z,width:"831",height:"240"})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"Step 11"))," :\nPut below details\nTittle : server-logs (Editable)\nPort : 12201\nAnd SAVE\n",(0,o.kt)("img",{alt:"graylog_image2",src:n(5419).Z,width:"604",height:"972"})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"Step 12"))," :\nAdd Logging driver into service docker-file which logs you want "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"    logging:\n          driver: 'gelf'\n        options:\n          gelf-address: \"tcp://<IP>:12201\"\n")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"graylog_image2",src:n(2406).Z,width:"608",height:"309"})),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"Step 13"))," :  Recreate a service once again with following command "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"        sudo docker-compose up -d --no-deps --force-recreate (servicename)\n")))}m.isMDXComponent=!0},1178:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/image1-e63ec700c9382b39bd10972720a14cb7.png"},9293:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/image2-3b657b209671dcfba660f476deb93180.png"},5419:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/image3-354912bf31cebaecabfcadef72c1b204.png"},2406:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/image4-5c91be5574084f2185ec730aa5c3c475.png"}}]);